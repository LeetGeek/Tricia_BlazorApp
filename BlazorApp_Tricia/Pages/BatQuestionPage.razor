@page "/questionPageBats/{questionNumberString}"
@using BlazorApp_Tricia.Data
@inject QuestionService QuestionService
@inject NavigationManager NavManager
@inject StudentService StudentService
@inject IJSRuntime JsRuntime





<div style="margin-left:50px; margin-right:50px">
     <p style="text-align: center;"><u>EXAMPLE TEST QUESTIONS</u></p>



    @if(questions == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        var questionId = 0;
        @foreach(var question in questions)
        {
            var anwserIndex = 0;
            var anwserId = $"A{anwserIndex}";
        
            <div>
               
                <p>@question.QuestionText</p>
                <div>
                    <fieldset>
                    @foreach(var answer in @question.Answers)
                    {
                        <input type="radio" name="@question.QuestionId" @onchange="args=>SelectedAnswerChanged(question,args)" value="@answer" />
                        <label>@answer</label>
                        <br>
                    }
                    </fieldset>
                </div>
            </div>
            <br>
        }
        <button @onclick="OnNext">Next</button>
    
}
</div>



@code {
    [Parameter]
    public string questionNumberString { get; set; }
    private int questionNumber;

    private System.Diagnostics.Stopwatch stopwatch;

    private Student student;
    private IEnumerable<Question> questions;

    protected override async Task OnInitializedAsync()
    {
        //Logger.LogDebug(questionNumber);
        stopwatch = new System.Diagnostics.Stopwatch();
        stopwatch.Start();

        questionNumber = int.Parse(questionNumberString);

        student = StudentService.GetTargetStudent();
        questions = QuestionService.BatQuestions.Skip(questionNumber*2).Take(2);

    }

    private void SelectedAnswerChanged(Question q, ChangeEventArgs args)
    {
        var selectedAnswer = args.Value.ToString();
        student.Answers[q.QuestionId] = (q.Answers.ToList().IndexOf(selectedAnswer) + 1).ToString();

        //StateHasChanged();
    }

    private async void OnNext()
    {
        if(student.Answers.Keys.Count < 2)
        {
            await JsRuntime.InvokeVoidAsync("alert", "Please ensure that you have answered all of the questions before proceeding.");
            return;
        }


        var totalMilliseconds = stopwatch.Elapsed.TotalMilliseconds;
        var questionId = questions.FirstOrDefault()?.QuestionId;
        student.Stats[$"{questionId.Substring(0,questionId.Length-1)}"] = totalMilliseconds;
        StudentService.SaveStudent(student);

        NavManager.NavigateTo("/readingPage"); 

        //if(questionNumber == 1)
        //{
             
        //}
        //else
        //{

        //    questionNumber++;
        //    //questions = QuestionService.Questions.Skip(questionNumber*5).Take(5);
        //    //InvokeAsync(StateHasChanged);
        //    NavManager.NavigateTo($"/questionPageBats/{questionNumber}",true);
        //}

        
    }
}
